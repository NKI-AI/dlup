# coding=utf-8
# Copyright (c) dlup contributors
"""Utilities to work with binary masks"""
import cv2
import numpy as np
import shapely.affinity
from shapely.geometry import Polygon


def _DFS(polygons, contours, hierarchy, sibling_id, is_outer, siblings, offset=(0, 0), scaling=1.0) -> list[Polygon]:
    # Adapted FROM: https://gist.github.com/stefano-malacrino/7d429e5d12854b9e51b187170e812fa4
    while sibling_id != -1:
        contour = contours[sibling_id].squeeze(axis=1)
        if len(contour) >= 3:
            first_child_id = hierarchy[sibling_id][2]
            children = [] if is_outer else None
            _DFS(polygons, contours, hierarchy, first_child_id, not is_outer, children)

            if is_outer:
                polygon = Polygon(contour, holes=children)
                if offset is not None and offset != (0, 0):
                    transformation_matrix = [scaling, 0, 0, scaling, offset[0], offset[1]]
                    polygon = shapely.affinity.affine_transform(polygon, transformation_matrix)

                polygons.append(polygon)
            else:
                siblings.append(contour)

        sibling_id = hierarchy[sibling_id][0]


def generate_polygons(mask: np.ndarray, offset: tuple[int, int] = (0, 0), scaling: float = 1.0) -> list[Polygon]:
    # Adapted From: https://gist.github.com/stefano-malacrino/7d429e5d12854b9e51b187170e812fa4

    """Generates a list of Shapely polygons from the contours hierarchy returned by cv2.find_contours().
     The list of polygons is generated by performing a depth-first search on the contours hierarchy tree.

    Parameters
    ----------
    mask : np.ndarray
        Binary mask
    offset : tuple, optional
        The offset for the polygon
    scaling : float, optional
        The scaling for the polygon

    Returns
    -------
    list
        The list of generated Shapely polygons
    """
    contours, hierarchy = cv2.findContours(mask, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)

    hierarchy = hierarchy[0]
    polygons = []
    _DFS(polygons, contours, hierarchy, 0, True, [], offset=offset, scaling=scaling)

    return polygons
